[gd_scene load_steps=15 format=3 uid="uid://ngf4gfgc3fft"]

[ext_resource type="PackedScene" uid="uid://bmow3skodh8g8" path="res://scenes/player.tscn" id="1_nnsk1"]

[sub_resource type="StandardMaterial3D" id="StandardMaterial3D_e5uuo"]
albedo_color = Color(0.645678, 1, 0.521696, 1)

[sub_resource type="Shader" id="Shader_nnsk1"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.4.1.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix, depth_draw_always, cull_back, diffuse_burley, specular_schlick_ggx;

uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color, filter_linear_mipmap, repeat_enable;
uniform ivec2 albedo_texture_size;
uniform float point_size : hint_range(0.1, 128.0, 0.1);

uniform float roughness : hint_range(0.0, 1.0);
uniform sampler2D texture_metallic : hint_default_white, filter_linear_mipmap, repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r, filter_linear_mipmap, repeat_enable;

uniform float specular : hint_range(0.0, 1.0, 0.01);
uniform float metallic : hint_range(0.0, 1.0, 0.01);

uniform sampler2D texture_refraction : filter_linear_mipmap, repeat_enable;
uniform float refraction : hint_range(-1.0, 1.0, 0.001);
uniform vec4 refraction_texture_channel;
uniform sampler2D screen_texture : hint_screen_texture, repeat_disable, filter_linear_mipmap;
uniform sampler2D depth_texture : hint_depth_texture, repeat_disable, filter_nearest;

uniform sampler2D texture_normal : hint_roughness_normal, filter_linear_mipmap, repeat_enable;
uniform float normal_scale : hint_range(-16.0, 16.0);
varying vec3 uv1_triplanar_pos;

uniform float uv1_blend_sharpness : hint_range(0.0, 150.0, 0.001);
varying vec3 uv1_power_normal;

uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;

void vertex() {
	vec3 normal = NORMAL;

	TANGENT = vec3(0.0, 0.0, -1.0) * abs(normal.x);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.y);
	TANGENT += vec3(1.0, 0.0, 0.0) * abs(normal.z);
	TANGENT = normalize(TANGENT);

	BINORMAL = vec3(0.0, 1.0, 0.0) * abs(normal.x);
	BINORMAL += vec3(0.0, 0.0, -1.0) * abs(normal.y);
	BINORMAL += vec3(0.0, 1.0, 0.0) * abs(normal.z);
	BINORMAL = normalize(BINORMAL);

	// UV1 Triplanar: Enabled
	uv1_power_normal = pow(abs(NORMAL), vec3(uv1_blend_sharpness));
	uv1_triplanar_pos = VERTEX * uv1_scale + uv1_offset + TIME * 0.05;
	uv1_power_normal /= dot(uv1_power_normal, vec3(1.0));
	uv1_triplanar_pos *= vec3(1.0, -1.0, 1.0);
}

vec4 triplanar_texture(sampler2D p_sampler, vec3 p_weights, vec3 p_triplanar_pos) {
	vec4 samp = vec4(0.0);
	samp += texture(p_sampler, p_triplanar_pos.xy) * p_weights.z;
	samp += texture(p_sampler, p_triplanar_pos.xz) * p_weights.y;
	samp += texture(p_sampler, p_triplanar_pos.zy * vec2(-1.0, 1.0)) * p_weights.x;
	return samp;
}

void fragment() {
	vec4 albedo_tex = triplanar_texture(texture_albedo, uv1_power_normal, uv1_triplanar_pos);
	ALBEDO = albedo.rgb * albedo_tex.rgb;

	float metallic_tex = dot(triplanar_texture(texture_metallic, uv1_power_normal, uv1_triplanar_pos), metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	SPECULAR = specular;

	vec4 roughness_texture_channel = vec4(1.0, 0.0, 0.0, 0.0);
	float roughness_tex = dot(triplanar_texture(texture_roughness, uv1_power_normal, uv1_triplanar_pos), roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;

	// Normal Map: Enabled
	NORMAL_MAP = triplanar_texture(texture_normal, uv1_power_normal, uv1_triplanar_pos).rgb;
	NORMAL_MAP_DEPTH = normal_scale;

	// Refraction: Enabled (with normal map texture)
	vec3 unpacked_normal = NORMAL_MAP;
	unpacked_normal.xy = unpacked_normal.xy * 2.0 - 1.0;
	unpacked_normal.z = sqrt(max(0.0, 1.0 - dot(unpacked_normal.xy, unpacked_normal.xy)));
	vec3 ref_normal = normalize(mix(
			NORMAL,
			TANGENT * unpacked_normal.x + BINORMAL * unpacked_normal.y + NORMAL * unpacked_normal.z,
			NORMAL_MAP_DEPTH));
	vec2 ref_ofs = SCREEN_UV - ref_normal.xy * dot(triplanar_texture(texture_refraction, uv1_power_normal, uv1_triplanar_pos), refraction_texture_channel) * refraction;

	float ref_amount = 1.0 - albedo.a * albedo_tex.a;

	float refraction_depth_tex = textureLod(depth_texture, ref_ofs, 0.0).r;
	vec4 refraction_view_pos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV * 2.0 - 1.0, refraction_depth_tex, 1.0);
	refraction_view_pos.xyz /= refraction_view_pos.w;

	// If the depth buffer is lower then the model's Z position, use the refracted UV, otherwise use the normal screen UV.
	// At low depth differences, decrease refraction intensity to avoid sudden discontinuities.
	EMISSION += textureLod(screen_texture, mix(SCREEN_UV, ref_ofs, smoothstep(0.0, 1.0, VERTEX.z - refraction_view_pos.z)), ROUGHNESS * 8.0).rgb * ref_amount * EXPOSURE;
	ALBEDO *= 1.0 - ref_amount;
	// Force transparency on the material (required for refraction).
	ALPHA = 1.0;
}
"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_rwgxs"]
noise_type = 2
frequency = 0.009
fractal_type = 2
fractal_gain = 0.08
fractal_weighted_strength = 1.0

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_4wyf3"]
seamless = true
seamless_blend_skirt = 1.0
as_normal_map = true
noise = SubResource("FastNoiseLite_rwgxs")

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_k0juu"]
seamless = true
seamless_blend_skirt = 1.0
as_normal_map = true
noise = SubResource("FastNoiseLite_rwgxs")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_nnsk1"]
noise_type = 2

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_rwgxs"]
noise = SubResource("FastNoiseLite_nnsk1")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_71j4m"]
render_priority = 0
shader = SubResource("Shader_nnsk1")
shader_parameter/albedo = Color(0.333333, 1, 1, 0.517647)
shader_parameter/albedo_texture_size = Vector2i(0, 0)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 0.0
shader_parameter/texture_metallic = SubResource("NoiseTexture2D_4wyf3")
shader_parameter/metallic_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/texture_roughness = SubResource("NoiseTexture2D_rwgxs")
shader_parameter/specular = 0.91
shader_parameter/metallic = 0.42
shader_parameter/refraction = 0.05
shader_parameter/refraction_texture_channel = Vector4(1, 0, 0, 0)
shader_parameter/texture_normal = SubResource("NoiseTexture2D_k0juu")
shader_parameter/normal_scale = 0.0700008
shader_parameter/uv1_blend_sharpness = 1.0
shader_parameter/uv1_scale = Vector3(0.09, 0.04, 0.02)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(0, 0, 0)
shader_parameter/uv2_offset = Vector3(0, 0, 0)

[sub_resource type="BoxMesh" id="BoxMesh_qfnet"]
material = SubResource("ShaderMaterial_71j4m")
size = Vector3(100, 1, 100)

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_nnsk1"]
load_path = "res://.godot/imported/AllSky_Night_MoonBurst_Equirect.png-0e8ffa0151a88e944521a416b205b720.ctex"

[sub_resource type="PanoramaSkyMaterial" id="PanoramaSkyMaterial_rwgxs"]
panorama = SubResource("CompressedTexture2D_nnsk1")

[sub_resource type="Sky" id="Sky_4wyf3"]
sky_material = SubResource("PanoramaSkyMaterial_rwgxs")
process_mode = 2
radiance_size = 6

[sub_resource type="Environment" id="Environment_k0juu"]
background_mode = 2
sky = SubResource("Sky_4wyf3")
sky_custom_fov = 70.1
tonemap_mode = 3
ssao_enabled = true
sdfgi_enabled = true
sdfgi_use_occlusion = true

[node name="Node3D" type="Node3D"]

[node name="CSGBox3D" type="CSGBox3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.465149, 0)
use_collision = true
size = Vector3(100, 1, 100)
material = SubResource("StandardMaterial3D_e5uuo")

[node name="CSGBox3D" type="CSGBox3D" parent="CSGBox3D"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 4.36166, 0.884133, 0.529114)
size = Vector3(8.25012, 0.184082, 6.53284)

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.489995, 0)
mesh = SubResource("BoxMesh_qfnet")

[node name="player" parent="." instance=ExtResource("1_nnsk1")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 4.59084, 2.38457, 0.0394251)

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_k0juu")

[node name="DirectionalLight3D" type="DirectionalLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, -0.0976105, -0.166451, 0.0915337)
